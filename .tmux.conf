################################################################################
# Tmux configuration
################################################################################
# Credit:
#     http://github.com/brandur/tmux-extra
#     https://github.com/zanshin/dotfiles
################################################################################

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-a
bind-key C-a last-window

#set -g mouse on
#bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Allows us to use C-a a <command> to send commands to a TMUX session inside
# another TMUX session
bind-key a send-prefix

# Vim-like pane select
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# More scrolling
set-option -g history-limit 10000

# Make tmux display things in 256 colors
set -g default-terminal "screen-256color"

# Allow dim-ed colours in Terminal.app on MacOS
#set -sa terminal-overrides ",*:dim=\\E[2m"

# Set some pretty colors
# set pane colors - hilight the active pane
#set-option -g pane-border-fg colour235 #base02
#set-option -g pane-active-border-fg colour240 #base01

# colorise messages in the command line
#set-option -g message-fg brightred
#set-option -g message-bg colour235  #black

# Status Bar
set-option -g status on                # turn the status bar on
set -g status-interval 60              # set update frequencey (default 15 seconds)
set -g status-justify centre           # center window list for clarity
# set-option -g status-position top    # position the status bar at top of screen

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# set color for status bar
set-option -g status-fg yellow
set-option -g status-bg colour235 #black
# set-option -g status-attr dim

# set window list colors - red for active and cyan for inactive
#set-window-option -g window-status-fg white
#set-window-option -g window-status-bg colour235 #black
#set-window-option -g window-status-attr dim

#set-window-option -g window-status-current-fg red
#set-window-option -g window-status-current-bg colour235 #black
# set-window-option -g window-status-current-attr bright

# show session name, window & pane number, date and time on right side of
# status bar
set -g status-right-length 70
set -g status-right "#[fg=blue]#S #I:#P #[fg=yellow]:: %d %b %Y #[fg=green]:: %R" # :: #(date -u | awk '{print $4}')::"

# show host name and IP address on left side of status bar
set -g status-left-length 70
set -g status-left "#[fg=green]: #h : #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "
#istats | awk 'BEGIN{scan=0; max=0; bat=0} /Current charge/{bat=$5} /--- Extra Stats ---/{scan=1} {if (scan) { for(i=1; i<=NF; i++) { if(match($i, /[0-9\.]°C/)) {sub("°C", "", $i); if (max < $i) max = $i} }}} END{printf("%.1f°C %s\n", max, bat)}'
#set -g status-left " #[fg=green]: #h : #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #[fg=colour253]: #(istats | awk 'BEGIN{scan=0; max=0; bat=0} /Current charge/{bat=$5} /--- Extra Stats ---/{scan=1} {if (scan) { for(i=1; i<=NF; i++) { if(index(\$i, \"°C\")) {sub(\"°C\", \"\", \$i); if (max < \$i) max = \$i } } } } END{printf(\"%%.1f°C %%s\", max, bat)}')"

# C-k clears the pane buffer
bind -n C-l clear-history \; send-keys C-l

################################################################################
# MacOS configurations only
################################################################################

# Open vertical and horizontal split and new windows at the current path
# # Credit: http://superuser.com/a/720820/224792
 bind '"' split-window -c "#{pane_current_path}"
 bind % split-window -h -c "#{pane_current_path}"
 bind c new-window -c "#{pane_current_path}"

# # "Open" bug in MacOS (brew install reattach-to-user-namespace)
# set -g default-command "reattach-to-user-namespace -l /bin/bash"
